#!/bin/bash

wkdir=$(pwd)

# FDSN web services
#fdsnws_event="http://service.iris.edu/fdsnws/event/1/query"
fdsnws_station="http://service.iris.edu/fdsnws/station/1/query"
fdsnws_dataselect="http://service.iris.edu/fdsnws/dataselect/1/query"
irisws_sacpz="http://service.iris.edu/irisws/sacpz/1/query"

#======
usage(){
cat<<EOF
NAME

  IRIS_fdsnws_dataselect - a shell wrapper of IRIS web service to download waveform data.

SYNOPSIS

  IRIS_fdsnws_dataselect [-s <station_specs>] [-t <twin_specs>] [-o <out_dir>] <gcmt_catalog>

DESCRIPTION

  <gcmt_catalog>  a catalog list generated by fdsnws-event with catalog=GCMT

  Options:

  -s <station_specs> [b/20/60/90/150]
    box region: b/lat0/lat1/lon0/lon1
    radial region: r/lat0/lon0/radius0/radius1

  -t <twin_specs> [p,P/-500/1500]
    time window phase(s)/begin/end. If multiple phases specified,
    use the smallest traveltime as the reference time.

  -o <out_dir> [work directory]

NOTE
  1) TauP/bin/taup_time is called to calculate traveltime
  2) channel code is restricted to [FCHB]H?, i.e. only broadband high gain seismic data
  3) complete 3 components are checked, i.e. must have all ?H[ENZ] or ?H[12Z].

EOF
}

#====== parameters

# default option args
station_specs=b/20/60/90/150
twin_specs=p,P/-500/1500
out_dir=$wkdir

# parse options
while getopts ":s:t:o:h" opt
do
  case $opt in
  s)  
    station_specs="$OPTARG"
    ;;
  t)  
    twin_specs="$OPTARG"
    ;;
  o)  
    out_dir=$(readlink -f "$OPTARG")
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    usage
    exit 1
    ;;
  h)
    usage
    exit 1
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    usage
    exit 1
    ;;
  esac
done

# get all mass-arguments
shift $((OPTIND-1))

event_list=${1:?[arg] need gcmt_catalog}
event_list=$(readlink -f $event_list)

# process arguments
geo_range=$(echo $station_specs | awk -F"/" '\
  $1=="b"{printf \
    "minlatitude=%s&maxlatitude=%s&minlongitude=%s&maxlongitude=%s",\
    $2,$3,$4,$5}; \
  $1=="r"{printf \
    "latitude=%s&longitude=%s&minradius=%s&maxradius=%s",$2,$3,$4,$5}')

phase_name=$(echo ${twin_specs} | cut -d / -f 1)
twin_begin=$(echo ${twin_specs} | cut -d / -f 2)
twin_end=$(echo ${twin_specs} | cut -d / -f 3)

if [ -z "$phase_name" -o -z "$twin_begin" -o -z "$twin_end" ]
then
  echo "[ERROR] time window: phase=$phase_name b=$twin_begin e=$twin_end"
  exit 1
fi

#====== get data for each event 

# LOG
echo "[LOG] wkdir=$wkdir"
echo "[LOG] $0 $event_list -s $station_specs -t $twin_specs -o $out_dir"

tmp_list=$(mktemp -p $wkdir)

grep -v "^[ \t]*#" $event_list |\
while read event_line
do
  echo
  echo "[LOG] ====== $event_line"
  echo

  #------ event info
  IFS='|' read -ra evt <<< "$event_line"
  evid=${evt[8]#*,} # use GCMT event ID
  evodate=${evt[1]/T/ } # replace T with a whitespace
  evla=${evt[2]//[[:space:]]/} # remove whitespaces
  evlo=${evt[3]//[[:space:]]/}
  evdp=${evt[4]//[[:space:]]/}

  evoepoch=$(date -ud "$evodate UTC" +%s)
  evojday=$(date -ud "$evodate UTC" +%Y,%j,%H:%M:%S.%N)

  #------ create event directories
  event_dir=$out_dir/$evid
  mkdir -p $event_dir
  cd $event_dir
  mkdir data mseed sacpz

  # save event info
  echo "$event_line" > $event_dir/data/event.txt

  #------ get channel list
  echo "[LOG] ------ query seismic stations"

  # channel operating time range (start 1 day before and end 1 day after origin time)
  startbefore=$(date -ud "$evodate -1 days" +%Y-%m-%dT%H:%M:%S)
  endafter=$(date -ud "$evodate 1 days" +%Y-%m-%dT%H:%M:%S)
  str_twin="startbefore=${startbefore}&endafter=${endafter}"

  # retrive channel info from IRIS web service
  channel_list=$event_dir/data/channel.txt
  echo "[LOG] get channel list"
  str_link="${fdsnws_station}?${str_twin}&${geo_range}&channel=FH?,CH?,HH?,BH?&level=channel&format=text"
  echo "[LOG] wget $str_link -O $channel_list"
  wget "$str_link" -O $channel_list

  # remove dumplicated sampling rates, e.g. HHZ and BHZ
  awk -F"|" '$1!~/#/{sub(/^./,".",$4); printf "%s|%s|%s|%s|\n",$1,$2,$3,$4}' \
    $channel_list | sort -u |\
  while read seed_id
  do
    grep "^$seed_id" $channel_list > $tmp_list
    num_chans=$(awk 'END{print NR}' $tmp_list)
    if [ "$num_chans" -gt 1 ]
    then
      echo "[LOG] multiple sampling rates found for channel: $seed_id"
      cat $tmp_list
      sed -i "/^${seed_id}/s/^/#/" $channel_list
      codes=$(awk -F"|" '{printf "%s ", substr($4,1,1)}' $tmp_list)
      for c in B H C F
      do
        echo $codes | grep "$c" > /dev/null
        if [ "$?" -eq 0 ]
        then
          chan_id=$(echo "$seed_id" | sed "s/\./$c/")
          echo "[LOG] selected channel: $chan_id"
          sed -i "/^#${chan_id}/s/^#//" $channel_list 
          break
        fi
      done
    fi
  done

  # remove stations with incomplete components, 
  # e.g. not all ?H[ENZ] or ?H[12Z] exist.
  awk -F"|" '$1!~/#/{printf "%s|%s|%s|\n",$1,$2,$3}' \
    $channel_list | sort -u |\
  while read seed_id
  do
    read -a cha <<< $(grep "^${seed_id}" $channel_list | awk -F"|" '{print $4}')

    # band code/sampling rate
    c=$(echo ${cha[0]:0:1})

    if [ "${#cha[@]}" -ne 3 ] || [ "${cha[2]}" != "${c}HZ" ] || \
       ( ( [ "${cha[0]}" != "${c}HE" ] || [ "${cha[1]}" != "${c}HN" ] ) && \
         ( [ "${cha[0]}" != "${c}H1" ] || [ "${cha[1]}" != "${c}H2" ] ) )
    then
      echo "[WARN] incorrect components found for ${seed_id}, SKIP"
      echo "${cha[@]}"
      sed -i "/^${seed_id}/s/^/#/" $channel_list
      continue
    fi

  done

  #------ generate data selection list
  echo
  echo "[LOG] ------ make data selection list"
  echo
  dataselect_list=$event_dir/data/dataselect.txt
  cat /dev/null > $dataselect_list

  grep -v "^#" $station_list |\
  while read station_line
  do
    # parse station info
    IFS='|' read -ra sta <<< "$station_line"
    netwk=${sta[0]}
    stnm=${sta[1]}
    stla=${sta[2]}
    stlo=${sta[3]}
    # get traveltime
    ttp=$(taup_time -evt $evla $evlo -h $evdp \
        -sta $stla $stlo --time -ph $phase_name | head -n1 | awk '{print $1}')
    if [ -z "$ttp" ]
    then
      echo "[ERROR] taup_time failed to get travaltime ttp=$ttp"
      exit -1
    fi
    # get time window
    t0=$(echo "$evoepoch + $twin_begin + $ttp" | bc -l)
    t1=$(echo "$evoepoch + $twin_end + $ttp" | bc -l)
    starttime=$(date -u -d @$t0 +%Y-%m-%dT%H:%M:%S)
    endtime=$(date -u -d @$t1 +%Y-%m-%dT%H:%M:%S)
    # get channel id
    cha=$(grep "^${netwk}|${stnm}|" $channel_list |\
      awk -F"|" '{print $4}' | sort -u | awk '{printf "%s,",$1}')
    # print data selection list 
    printf "%-6s %-6s  *  %s  %s  %s\n" \
      $netwk $stnm "${cha%,}" $starttime $endtime \
      >> $dataselect_list
  done

  #------ get waveform data
  echo 
  echo "[LOG] ------ get waveform data"
  echo
  mseed_file=$event_dir/mseed/${evid}.mseed
  # query waveforms 
  str_link="${fdsnws_dataselect}"
  echo "[LOG] wget --post-file=$dataselect_list $str_link -O $mseed_file"
  echo
  wget --post-file=$dataselect_list "$str_link" -O $mseed_file

  #------ get sacpz
  echo 
  echo "[LOG] ------ get sacpz"
  echo

  sacpz_dir=$event_dir/sacpz

  grep -v "^#" $channel_list |\
  while read line
  do
    IFS='|' read -ra x <<< "$line"

    net="${x[0]}"
    sta="${x[1]}"
    loc="${x[2]}"
    cha="${x[3]}"

    IFS="$old_IFS" read -ra x <<< $(grep "${net}[ ]*${sta}" $dataselect_list)
    if [ "$?" -ne 0 ]
    then
      echo "[ERROR] ${net}.${sta} is not found in $dataselect_list! SKIP"
      continue
    fi
    starttime="${x[4]}"
    endtime="${x[5]}"

    echo
    echo "SACPZ ${net}.${sta}.${loc}.${cha} $starttime $endtime"
    echo
  
    url="${irisws_sacpz}?net=${net}&sta=${sta}&loc=${loc:---}&cha=${cha}&starttime=${starttime}&endtime=${endtime}"

    outfile="${sacpz_dir}/${net}.${sta}.${loc}.${cha}"
  
    wget "$url" -O $outfile
  
  done

done # for event_line in $(grep -v "^[ \t]*#" $event_list)

#====== clear up
rm $tmp_list

#END